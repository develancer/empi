# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "test-build" ]
  pull_request:
    branches: [ "test-build" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "empi=empi-`git describe --tags`-`echo ${{ runner.os }} | tr [:upper:] [:lower:]`" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libfftw3-dev

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install gcc fftw && rm -vf `brew --prefix fftw`/lib/*.dylib

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      uses: johnwason/vcpkg-action@v5
      id: vcpkg
      with:
        pkgs: fftw3 pthread
        triplet: x64-windows-release
        cache-key: ${{ matrix.os }}
        revision: master
        token: ${{ github.token }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ runner.os == 'Linux' && '-DSTANDALONE=TRUE' || '' }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target empi

    - name: Prepare production artifacts (Non-Windows)
      if: runner.os != 'Windows'
      run: |
        mkdir ${{ steps.strings.outputs.empi }}
        cp ${{ steps.strings.outputs.build-output-dir }}/empi ${{ steps.strings.outputs.empi }}
        cp LICENCE ${{ steps.strings.outputs.empi }}
        cp README.md ${{ steps.strings.outputs.empi }}
        chmod +x ${{ steps.strings.outputs.empi }}/empi

    - name: Prepare production artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir ${{ steps.strings.outputs.empi }}
        copy ${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}\empi.exe ${{ steps.strings.outputs.empi }}
        copy ${{ github.workspace }}\vcpkg\packages\fftw3_x64-windows-release\bin\fftw3.dll ${{ steps.strings.outputs.empi }}
        copy LICENCE ${{ steps.strings.outputs.empi }}
        copy README.md ${{ steps.strings.outputs.empi }}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.empi }}
        path: ${{ steps.strings.outputs.empi }}*/
